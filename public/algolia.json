
[
  
  
  {
    "objectID": "1678903200",
    "permalink": "/post/test/asm/",
    "title": "hehe",
    
    "content": " 参考链接 汇编语言入门教程 - 阮一峰的网络日志\n汇编语言 教程 | 参考手册 (cankaoshouce.com)\nGuide to x86 Assembly\nGCC-Inline-Assembly-HOWTO \u0026amp;mdash; GCC-Inline-Assembly-HOWTO\n译：GCC内联汇编入门 - 简书 (jianshu.com)\nArm A-profile A32/T32 Instruction Set Architecture\n基础知识 引言 我们知道，CPU 只负责计算，本身不具备智能。你输入一条指令（instruction），它就运行一次，然后停下来，等待下一条指令。\n这些指令都是二进制的，称为操作码（opcode），比如加法指令就是00000011。编译器的作用，就是将高级语言写好的程序，翻译成一条条操作码。\n对于人类来说，二进制程序是不可读的，根本看不出来机器干了什么。为了解决可读性的问题，以及偶尔的编辑需求，就诞生了汇编语言。\n汇编语言是二进制指令的文本形式，与指令是一一对应的关系。比如，加法指令00000011写成汇编语言就是 ADD。只要还原成二进制，汇编语言就可以被 CPU 直接执行，所以它是最底层的低级语言。\n[!important]\n以下教程开发环境为NAsm，使用Inte格式。\nNASM 更适合跨平台、轻量级的汇编开发，语法简洁，灵活性高。\nMASM 则更适合 Windows 平台上的专业开发，功能丰富，语法较复杂，集成度高，适合开发大规模的 Windows 应用程序和驱动。\n[!TIP]\n汇编语法主要有两大派系：AT\u0026amp;amp;T语法 和 Intel语法。\nGAS (GNU Assembler) 编译器默认是基于AT\u0026amp;amp;T语法；MASM、NASM等编译器默认基于Intel语法。\n需要说明的是，GAS汇编器除了支持AT\u0026amp;amp;T语法之外，自己也定义了一些额外的directives，用于辅助完成汇编操作。关于GAS汇编器及其语法可以参考GAS的官方文档：https://sourceware.org/binutils/docs/as/\n寄存器 CPU 本身只负责运算，不负责储存数据。数据一般都储存在内存之中，CPU 要用的时候就去内存读写数据。但是，CPU 的运算速度远高于内存的读写速度，为了避免被拖慢，CPU 都自带一级缓存 …",
    
    "date": "2023-03-15 11:00:00",
    "updated": "2023-03-15 11:00:00"
  }
  
  , 
  {
    "objectID": "1678903200",
    "permalink": "/post/hello/",
    "title": "Hello World",
    
    "content": "💘 博麗 霊夢 💘\n",
    
    "date": "2023-03-15 11:00:00",
    "updated": "2023-03-15 11:00:00"
  }
  
]